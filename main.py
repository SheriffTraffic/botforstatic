import telebot
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8053486744:AAFtM6plXwfXX5gGkJGfw1_xG1Na5b8BF2w"
bot = telebot.TeleBot(BOT_TOKEN)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("lali4ka-653f000826ef.json", scope)
client = gspread.authorize(creds)

# –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ç–∞–±–ª–∏—Ü—å
try:
    general_sheet = client.open("bazaclient")
    manager_sheet = client.open("Bazaformanager")
except gspread.SpreadsheetNotFound:
    print("–¢–∞–±–ª–∏—Ü—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤–∏ —Ç–∞–±–ª–∏—Ü—å —É Google Sheets.")
    exit()

# –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_state = {}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –∑ —ñ–º–µ–Ω–∞–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
def get_manager_buttons():
    sheet_names = [sheet.title for sheet in manager_sheet.worksheets()]
    buttons = [telebot.types.KeyboardButton(name) for name in sheet_names]
    return buttons

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ–Ω—Ç–∞–∫—Ç—É –≤ –∑–∞–≥–∞–ª—å–Ω—ñ–π —Ç–∞–±–ª–∏—Ü—ñ
def contact_exists(contact):
    worksheet = general_sheet.sheet1
    all_contacts = worksheet.col_values(3)  # 3-—Ç—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç–∏
    return contact in all_contacts

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Å—É –¥–∞–Ω–∏—Ö —É —Ç–∞–±–ª–∏—Ü—é
def save_to_sheet(sheet, data):
    worksheet = sheet.worksheet(data["manager"])
    last_row = len(worksheet.get_all_values()) + 1
    worksheet.append_row([last_row, data["date"], data["contact"], data["phone"], data["link"], data["service"], data["status"]])

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è /start
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_state[chat_id] = {"manager": None, "resource": None, "phone": None, "contact": None, "link": None,
                           "service": None, "status": None}

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*get_manager_buttons())
    bot.send_message(chat_id, "–í–∏–±–µ—Ä—ñ—Ç—å —Å–µ–±–µ üßë‚Äçüíª:", reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
@bot.message_handler(func=lambda message: message.text in [sheet.title for sheet in manager_sheet.worksheets()])
def choose_manager(message):
    chat_id = message.chat.id
    user_state[chat_id]["manager"] = message.text
    user_state[chat_id]["date"] = datetime.now().strftime("%Y-%m-%d")

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    resources = ["–¢—Ä–µ–π–¥–µ—Ä–∏ üìà", "–ö—Ä–∏–ø—Ç–æ –ê–¥–º—ñ–Ω–∏ üë®üèª‚Äçüíª", "–í–Ω–µ—à–∫–∞ üì§", "–ü—Ä–æ–µ–∫—Ç–∏ üíº"]
    markup.add(*resources)
    bot.send_message(chat_id, "–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ—Å—É—Ä—Å üìù:", reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä–µ—Å—É—Ä—Å—É
@bot.message_handler(func=lambda message: message.text in ["–¢—Ä–µ–π–¥–µ—Ä–∏ üìà", "–ö—Ä–∏–ø—Ç–æ –ê–¥–º—ñ–Ω–∏ üë®üèª‚Äçüíª", "–í–Ω–µ—à–∫–∞ üì§", "–ü—Ä–æ–µ–∫—Ç–∏ üíº"])
def choose_resource(message):
    chat_id = message.chat.id
    user_state[chat_id]["resource"] = message.text

    if message.text in ["–í–Ω–µ—à–∫–∞ üì§", "–ü—Ä–æ–µ–∫—Ç–∏ üíº"]:
        bot.send_message(chat_id, "–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É ‚òéÔ∏è:")
    else:
        bot.send_message(chat_id, "–í–ø–∏—à—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç:")

# –û–±—Ä–æ–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
@bot.message_handler(func=lambda message: user_state[message.chat.id]["resource"] in ["–í–Ω–µ—à–∫–∞ üì§", "–ü—Ä–æ–µ–∫—Ç–∏ üíº"] and
                                          user_state[message.chat.id]["phone"] is None)
def handle_phone(message):
    chat_id = message.chat.id
    user_state[chat_id]["phone"] = message.text
    bot.send_message(chat_id, "–í–ø–∏—à—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç:")

# –û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—É
@bot.message_handler(func=lambda message: user_state[message.chat.id]["contact"] is None)
def handle_contact(message):
    chat_id = message.chat.id
    user_state[chat_id]["contact"] = message.text

    if contact_exists(user_state[chat_id]["contact"]):
        bot.send_message(chat_id, "–¶–µ–π –∫–æ–Ω—Ç–∞–∫—Ç –≤–∂–µ —î —É –∑–∞–≥–∞–ª—å–Ω—ñ–π –±–∞–∑—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π.")
        user_state[chat_id]["contact"] = None  # –û—á–∏—â—É—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç, —â–æ–± –ø–æ–ø—Ä–æ—Å–∏—Ç–∏ —â–µ —Ä–∞–∑
    else:
        bot.send_message(chat_id, "–í–ø–∏—à—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è:")

# –û–±—Ä–æ–±–∫–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
@bot.message_handler(func=lambda message: user_state[message.chat.id]["link"] is None)
def handle_link(message):
    chat_id = message.chat.id
    user_state[chat_id]["link"] = message.text
    bot.send_message(chat_id, "–í–ø–∏—à—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:")

# –û–±—Ä–æ–±–∫–∞ –ø–æ—Å–ª—É–≥–∏
@bot.message_handler(func=lambda message: user_state[message.chat.id]["service"] is None)
def handle_service(message):
    chat_id = message.chat.id
    user_state[chat_id]["service"] = message.text
    bot.send_message(chat_id, "–ù–∞–¥–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å:")

# –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç—É—Å—É
@bot.message_handler(func=lambda message: user_state[message.chat.id]["status"] is None)
def handle_status(message):
    chat_id = message.chat.id
    user_state[chat_id]["status"] = message.text

    data = user_state[chat_id]

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ —Ç–∞–±–ª–∏—Ü—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    save_to_sheet(manager_sheet, data)

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ –∑–∞–≥–∞–ª—å–Ω—É —Ç–∞–±–ª–∏—Ü—é
    general_worksheet = general_sheet.sheet1
    last_row = len(general_worksheet.get_all_values()) + 1
    general_worksheet.append_row([last_row, data["date"], data["contact"], data["phone"], data["link"], data["service"], data["manager"], data["status"]])

    bot.send_message(chat_id, "–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ! –î–ª—è –ø–æ—á–∞—Ç–∫—É –∑–∞–Ω–æ–≤–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start.")
    user_state[chat_id] = {}  # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()
